% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/configurations-related_functions.R
\name{change_config}
\alias{change_config}
\title{Change individual configurations in the movenet environment}
\usage{
change_config(...)
}
\arguments{
\item{...}{One or more configurations to change, using \code{name = value} format.
These can be provided in the form of individual name-value pairs, as a
named character vector, or as a named list.}
}
\value{
\itemize{
\item If one or more configuration name-value pairs are provided, a structured
named list of the values of all configurations in the movenet environment,
as they were before the function call (returned invisibly).
As side effect, any provided configurations are changed in the movenet environment.
If a configuration name is ambiguous or unrecognised, or if a requested change
would result in an invalid configuration value, the requested configuration
change is ignored and a warning is displayed.
\item If no arguments are provided, an unstructured named list of all configurations as currently set in the movenet environment.
}
}
\description{
\code{change_config()} allows the user to set the value of one or more
configurations in the movenet environment. Any requested changes are
validated before being made.
}
\details{
\subsection{Configuration names}{

Each configuration name must follow the \code{"datatype_configtype.configname"}
format, consisting of the following elements:
\itemize{
\item \code{datatype}: Type of data the configuration applies to. Either \code{movedata} or \code{holdingdata}.
\item \code{configtype}: Type of configuration. Either \code{fileopts} (file options) or \code{cols} (column headers/indices).
\item \code{configname}: Name of the specific configuration.
}

For example: \code{"movedata_fileopts.separator"}, \code{"holdingdata_cols.id"}

\code{change_config()} uses partial matching for configuration names. If a
configuration name is ambiguous or unrecognised (e.g. if the configuration is
unset), the requested change is ignored and a warning is displayed.
}

\subsection{Configuration values}{

Before configuration values are set, their data format is validated.
Valid configuration data formats are as follows:
\itemize{
\item \verb{(move|holding)data_fileopts.separator}: A single character.
\item \verb{(move|holding)data_fileopts.decimal}: A single character.
\item \verb{(move|holding)data_fileopts.encoding}: A character string.
\item \verb{(move|holding)data_fileopts.date_format}: A character string matching readr date format specifications. See \code{\link[readr:parse_datetime]{readr::parse_date()}} for
guidance.
\item \code{holdingdata_fileopts.country_code}: A character string consisting of two upper-case letters.
\item \code{holdingdata_fileopts.coord_EPSG_code}: A single integer.
\item \verb{(move|holding)data_cols} configurations: A character string or a single integer.
All configurations within \code{movedata_cols} or \code{holdingdata_cols} must have unique values.
}

Configurations can't be set to \code{NULL}.

If a configuration value is invalid, the requested change is ignored and a
warning is displayed.
}
}
\examples{
# Set-up: Save movenet environment with current configurations
movenetenv <- movenet:::movenetenv
old_config <- movenetenv$options

# Load a config file and examine current configurations
load_config(system.file("configurations", "fakeScotEID_holding.yml", package="movenet"))
get_config("holdingdata_fileopts.separator", "holdingdata_cols.id") #Examine configurations

# Change configurations
change_config(holdingdata_fileopts.sep = ".", holdingdata_cols.id = "identifier")
get_config("holdingdata_fileopts.separator", "holdingdata_cols.id") #Examine changed configurations

# Clean-up: Reinstate previous configurations
movenetenv$options <- old_config
rm("old_config", "movenetenv")

}
\seealso{
\itemize{
\item \code{\link[readr:parse_datetime]{readr::parse_date()}} for guidance on date format specification strings.
\item \code{vignette("configurations")} for an explanation of the movenet
config system.
}

Other configurations-related functions: 
\code{\link{get_config}()},
\code{\link{load_config}()},
\code{\link{new_config}()},
\code{\link{save_config}()},
\code{\link{validate_config}()}
}
\concept{configurations-related functions}
