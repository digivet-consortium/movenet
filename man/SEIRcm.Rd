% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SEIRcm.R
\name{SEIRcm}
\alias{SEIRcm}
\title{Create an SEIR model with contact matrix}
\usage{
SEIRcm(
  infected = NULL,
  tspan = NULL,
  epsilon_rate = NULL,
  epsilon_shape = 1,
  gamma_rate = NULL,
  gamma_shape = 1,
  contact_matrix = NULL
)
}
\arguments{
\item{infected}{logical vector with the infectious status in each
node.}

\item{tspan}{A vector (length >= 1) of increasing time points
where the state of each node is to be returned. Can be either
an \code{integer} or a \code{Date} vector. A \code{Date}
vector is coerced to a numeric vector as days, where
\code{tspan[1]} becomes the day of the year of the first year
of \code{tspan}. The dates are added as names to the numeric
vector.}

\item{epsilon_rate}{the incubation rate from exposed to infected
state.}

\item{epsilon_shape}{number of stages in the exposed (E)
state. Each stage has an exponentially distributed duration
given by epsilon_rate. Default is 1.}

\item{gamma_rate}{the recovery rate from infected to recovered
state.}

\item{gamma_shape}{number of stages in the infectious (I)
state. Each stage has an exponentially distributed duration
given by gamma_rate. Default is 1.}

\item{contact_matrix}{an optional contact matrix to include
between-node transmission of infection. The contact matrix
specifies the strength of the interaction between
nodes. Specifically, \code{contact_matrix[i, j]} measures the
relative strength of transmission from node \code{i} to node
\code{j}.}
}
\description{
Create an \code{SEIRcm} model to be used by the simulation
framework.
}
\details{
The \code{SEIRcm} model contains four compartments per node;
susceptible (S), exposed (E) (nodes that have been infected but
are not yet infectious), infectious (I), and recovered
(R). Moreover, it also includes a contact matrix to capture
between-node spread. The \code{SEIRcm} model contains six state
transitions. The ternary operator \code{(a ? b : c)} is a
shorthand for an if-else-statement that evaluates to \code{b} if
the value of \code{a} is true, else to \code{c}.

\deqn{@ \rightarrow (S > 0\,\&\&\,E == 0)\,?\,\lambda_i : 0
\rightarrow E}{@ -> (S > 0 && E == 0) ? lambda_i : 0 -> E}

\deqn{@ \rightarrow (E > 0\,\&\&\,E <
\epsilon_{\text{shape}})\,?\,\epsilon_{\text{rate}} : 0
\rightarrow E}{@ -> (E > 0 && E < epsilon_shape) ? epsilon_rate :
0 -> E}

\deqn{@ \rightarrow (I == 0\,\&\&\,E ==
\epsilon_{\text{shape}})\,?\,\epsilon_{\text{rate}} : 0
\rightarrow E + I}{@ -> (I == 0 && E == epsilon_shape) ?
epsilon_rate : 0 -> E + I}

\deqn{@ \rightarrow (I > 0\,\&\&\,I < \gamma_{\text{shape}})\,?\,
\gamma_{\text{rate}} : 0 \rightarrow I}{@ -> (I > 0 && I < gamma_shape) ?
gamma_rate : 0 -> I}

\deqn{@ \rightarrow (R == 0\,\&\&\,I ==
\gamma_{\text{shape}})\,?\,\gamma_{\text{rate}} : 0 \rightarrow I
+ R}{@ -> (R == 0 && I == gamma_shape) ?  gamma_rate : 0 -> I + R}

Where the first transition depends on an external force of
infection denoted lambda_i, calculated in the post-time-step
function using the contact matrix. The second and third
transitions involves the stages of an Erlang process for E;
\eqn{E_1 \rightarrow E_2 \rightarrow \ldots \rightarrow
E_{\epsilon_{\text{shape}}}}{E_1 -> E_2 -> \ldots ->
E_epsilon_shape}. The first part of the Erlang process for \eqn{E}
(transition 2) simulates up to, but not including the last stage,
in a process to increment the counter for the \eqn{E} stages. The
last stage \eqn{E_{\epsilon_{\text{shape - 1}}} \rightarrow
E_{\epsilon_{\text{shape}}}}{E_(epsilon_shape - 1) ->
E_epsilon_shape} occurs when the \eqn{E} count equals the
\eqn{\epsilon_{\text{shape}}}{epsilon_shape} parameter and the
\eqn{I} count is zero. Similarly, the fourth and fifth transitions
involves the stages of an Erlang process for I; \eqn{I_1
\rightarrow I_2 \rightarrow \ldots \rightarrow
E_{\gamma_{\text{shape}}}}{I_1 -> I_2 -> \ldots ->
E_gamma_shape}. The first part of the Erlang process for \eqn{I}
(transition 4) simulates up to, but not including the last stage,
in a process to increment the counter for the \eqn{I} stages. The
last stage \eqn{I_{\gamma_{\text{shape - 1}}} \rightarrow
I_{\gamma_{\text{shape}}}}{I_(gamma_shape - 1) -> I_gamma_shape}
occurs when the \eqn{I} count equals the
\eqn{\gamma_{\text{shape}}}{gamma_shape} parameter and the \eqn{R}
count is zero.
}
\examples{
## Create an SEIRcm model with 1000 initially infected nodes.
## Assume that the average infectious period is 10 days.
n <- 1000
m1 <- SEIRcm(
    infected = rep(TRUE, n),
    tspan = 1:100,
    epsilon_rate = 1/5,
    gamma_rate = 1/10)

## Run the model and extract the trajectory.
t1 <- trajectory(run(m1))

## Determine the duration of infection in each node. Add half a
## day, since the transition happens sometime during the day when
## the status becomes R.
d1 <- sapply(split(t1$I, t1$node), function(infected) {
    x <- which(infected > 0)
    ifelse(length(x), max(x), 0) + 0.5
})

## Again, create an SEIRcm model with 10000 initially infected
## nodes. But this time, assume the infection happens in 10 steps,
## where each step has a duration of 1 day on average.
m2 <- SEIRcm(
    infected = rep(TRUE, n),
    tspan = 1:100,
    epsilon_rate = 1/5,
    gamma_rate = 1,
    gamma_shape = 10)

## Run the model and extract the trajectory for the infected
## state.
t2 <- trajectory(run(m2))

## Determine the duration of infection in each node. Add half a
## day, since the transition happens sometime during the day when
## the status becomes R.
d2 <- sapply(split(t2$I, t2$node), function(infected) {
    x <- which(infected > 0)
    ifelse(length(x), max(x), 0) + 0.5
})

hist(d2, freq = FALSE, col = rgb(1, 0, 0, 1/4), xlim = c(0, 100),
     xlab = "Duration of infection in days", main = "")
hist(d1, freq = FALSE, col = rgb(0, 0, 1, 1/4), add = TRUE)
}
